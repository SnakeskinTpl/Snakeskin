/**!
 * @status stable
 * @version 1.0.0
 */

/**
 * Номер итерации объявления шаблона
 * @type {number}
 */
DirObj.prototype.startTemplateI = 0;

/**
 * Номер строки объявления шаблона
 * @type {?number}
 */
DirObj.prototype.startTemplateLine = null;

/**
 * Название шаблона
 * @type {?string}
 */
DirObj.prototype.tplName = null;

/**
 * Название родительского шаблона
 * @type {?string}
 */
DirObj.prototype.parentTplName = null;

var start,
	end;

Snakeskin.addDirective(
	'template',

	{
		placement: 'global',
		notEmpty: true
	},

	(start = function (command) {
		this.startDir();

		// Начальная позиция шаблона
		// +1 => } >>
		this.startTemplateI = this.i + 1;
		this.startTemplateLine = this.info.line;

		// Имя + пространство имён шаблона
		try {
			var tmpTplName = /(.*?)\(/.exec(command)[1],
				tplName = this.pasteDangerBlocks(tmpTplName);

		} catch (ignore) {
			throw this.error('Invalid syntax');
		}

		if (!tplName) {
			throw this.error('Invalid syntax');
		}

		this.info.template = tplName;
		if (this.name === 'placeholder') {
			if (!write[tplName]) {
				write[tplName] = false;
			}
		}

		this.tplName = tplName;
		this.blockStructure = {
			name: 'root',
			parent: null,
			childs: []
		};

		this.blockTable = {};
		this.varCache[tplName] = {};

		if (this.proto) {
			return;
		}

		var parentTplName;
		if (/\s+extends\s+/m.test(command)) {
			try {
				parentTplName = this.pasteDangerBlocks(/\s+extends\s+(.*)/m.exec(command)[1]);
				this.parentTplName = parentTplName;

			} catch (ignore) {
				throw this.error('Invalid syntax');
			}

			if (cache[parentTplName] === void 0) {
				throw this.error(
					'The specified template ("' + parentTplName + '" -> "' + tplName + '") ' +
						'for inheritance is not defined'
				);
			}
		}

		this.initTemplateCache(tplName);
		extMap[tplName] = parentTplName;

		// Входные параметры
		try {
			var args = /\((.*?)\)/.exec(command)[1];

		} catch (ignore) {
			throw this.error('Invalid syntax');
		}

		// Для возможности удобного пост-парсинга,
		// каждая функция снабжается комментарием вида:
		// /* Snakeskin template: название шаблона; параметры через запятую */
		this.save(
			'/* Snakeskin template: ' +
				tplName +
				'; ' +
				args.replace(/=(.*?)(?:,|$)/g, '') +
			' */'
		);

		// Декларация функции
		// с пространством имён или при экспорте в common.js
		if (/\.|\[/m.test(tmpTplName) || this.commonJS) {
			let lastName = '';
			let escaperRgxp = /^__ESCAPER_QUOT__\d+_/;

			let tmpArr = tmpTplName

				// Заменяем [] на .
				.replace(/\[/gm, '.')
				.replace(/]/gm, '')

				.split('.');

			let str = tmpArr[0],
				length = tmpArr.length;

			for (let i = 1; i < length; i++) {
				let el = tmpArr[i];

				this.save(
					'if (typeof ' + (this.commonJS ? 'exports.' : '') + str + ' === \'undefined\') { ' +
						(this.commonJS ? 'exports.' : i === 1 ? require ? 'var ' : 'window.' : '') + str + ' = {};' +
					'}'
				);

				if (escaperRgxp.test(el)) {
					str += '[' + el + ']';
					continue;

				} else if (i === length - 1) {
					lastName = el;
				}

				str += '.' + el;
			}

			this.save((this.commonJS ? 'exports.' : '') + tmpTplName + '= function ' + lastName + '(');

		// Без простраства имён
		} else {
			this.save((!require ? 'window.' + tmpTplName + ' = ': '') + 'function ' + tmpTplName + '(');
		}

		// Входные параметры
		var argsList = args.split(','),
			parentArgs = paramsCache[parentTplName];

		var argsTable = paramsCache[tplName] = {};
		for (let i = 0; i < argsList.length; i++) {
			let arg = argsList[i].split('=');
			arg[0] = arg[0].trim();

			argsTable[arg[0]] = {
				i: i,
				key: arg[0],
				value: arg[1] && arg[1].trim()
			};
		}

		// Если шаблон наследуется,
		// то подмешиваем ко входым параметрам шаблона
		// входные параметры родителя
		if (parentArgs) {
			for (let key in parentArgs) {
				if (!parentArgs.hasOwnProperty(key)) {
					continue;
				}

				let el = parentArgs[key],
					current = argsTable[key];

				if (el.value !== void 0) {
					if (!argsTable[key]) {
						argsTable[key] = {
							local: true,
							i: el.i,
							key: key,
							value: el.value
						};

					} else if (current && current.value === void 0) {
						argsTable[key].value = el.value;
					}
				}
			}
		}

		argsList = [];
		var localVars = [];

		for (let key in argsTable) {
			if (!argsTable.hasOwnProperty(key)) {
				continue;
			}

			let el = argsTable[key];

			if (el.local) {
				localVars[el.i] = el;

			} else {
				argsList[el.i] = el;
			}
		}

		// Инициализация параметров по умолчанию
		// (эээххх, когда же настанет ECMAScript 6 :()
		var defParams = '';
		for (let i = 0; i < argsList.length; i++) {
			let el = argsList[i];

			this.save(el.key);
			constICache[tplName][el.key] = el;

			if (el.value !== void 0) {
				defParams += el.key + ' = ' + el.key + ' !== void 0 && ' +
					el.key + ' !== null ? ' + el.key + ' : ' + el.value + ';';
			}

			// После последнего параметра запятая не ставится
			if (i !== argsList.length - 1) {
				this.save(',');
			}
		}

		// Входные параметры родительского шаблона,
		// для которых есть значение по умолчанию,
		// ставятся как локальные переменные
		for (let i = 0; i < localVars.length; i++) {
			let el = localVars[i];

			if (!el) {
				continue;
			}

			defParams += 'var ' + el.key + ' = ' + el.value + ';';
			constICache[tplName][el.key] = el;
		}

		this.save(') { ' + defParams + 'var __SNAKESKIN_RESULT__ = \'\', $_;');
		this.save(
			'var TPL_NAME = \'' + this.applyDefEscape(this.pasteDangerBlocks(tmpTplName)) + '\';' +
			'var PARENT_TPL_NAME;'
		);

		if (parentTplName) {
			this.save('PARENT_TPL_NAME = \'' + this.applyDefEscape(this.pasteDangerBlocks(parentTplName)) + '\';');
		}

		// Подкючение "внешних" прототипов
		if ((!extMap[tplName] || parentTplName) && this.preProtos[tplName]) {
			this.source = this.source.substring(0, this.i + 1) +
				this.preProtos[tplName] +
				this.source.substring(this.i + 1);

			this.preProtos[tplName] = null;
		}
	}),

	(end = function (command, commandLength) {
		var tplName = this.tplName;

		// Вызовы не объявленных прототипов
		if (this.backTableI) {
			throw this.error('Proto "' + this.lastBack + '" is not defined');
		}

		if (this.proto) {
			return;
		}

		cache[tplName] = this.source.substring(this.startTemplateI, this.i - commandLength - 1);
		table[tplName] = this.blockTable;

		// Обработка наследования:
		// тело шаблона объединяется с телом родителя
		// и обработка шаблона начинается заново,
		// но уже как атомарного (без наследования)
		if (this.parentTplName) {
			this.info.line = this.startTemplateLine;
			this.source = this.source.substring(0, this.startTemplateI) +
				this.getExtStr(tplName) +
				this.source.substring(this.i - commandLength - 1);

			this.initTemplateCache(tplName);
			this.startDir(this.structure.name);

			this.i = this.startTemplateI - 1;
			this.parentTplName = null;
			return false;
		}

		this.save(
			'return __SNAKESKIN_RESULT__; };' +
			'if (typeof Snakeskin !== \'undefined\') {' +
				'Snakeskin.cache[\'' +
					this.applyDefEscape(this.pasteDangerBlocks(tplName)) +
				'\'] = ' + (this.commonJS ? 'exports.' : '') + tplName + ';' +
			'}/* Snakeskin template. */'
		);

		this.canWrite = true;
		this.tplName = null;

		delete this.info.template;
	})
);

Snakeskin.addDirective(
	'placeholder',

	{
		placement: 'global',
		notEmpty: true
	},

	start,
	end
);