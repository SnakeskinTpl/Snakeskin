Snakeskin.addDirective(
	'forEach',

	{
		placement: 'template',
		notEmpty: true
	},

	function (command) {
		this.startDir();
		if (this.isSimpleOutput()) {
			let parts = command.split('=>'),
				val = parts[0];

			if (parts.length > 2) {
				throw this.error('Invalid syntax');
			}

			let args = parts[1] ?
				parts[1].trim().split(',') : [];

			let tmp = this.multiDeclVar('__TMP__ = ' + val),
				cache = this.prepareOutput('__TMP__', true);

			// Длина объекта
			let oLength = '';
			if (args.length >= 6) {
				oLength +=
					this.multiDeclVar('__TMP_LENGTH__ = 0') +
					'for (' + this.multiDeclVar('__KEY__', false) + 'in ' + cache + ') {' +
						'if (!' + cache + '.hasOwnProperty(' + this.prepareOutput('__KEY__', true) + ')) {' +
							'continue;' +
						'}' +

						this.prepareOutput('__TMP_LENGTH__++;', true) +
					'}';
			}

			// Для массивов
			let resStr =
				tmp +
				'if (' + cache + ') {' +
					'if (Array.isArray(' + cache + ')) {' +
						this.multiDeclVar('__TMP_LENGTH__ =  __TMP__.length') +
						'for (' + this.multiDeclVar('__I__ = -1') + this.prepareOutput('++__I__ < __TMP_LENGTH__;', true) + ') {' +
							(() => {
								var str = '';

								for (let i = 0; i < args.length; i++) {
									switch (i) {
										case 0: {
											str += this.multiDeclVar(args[i] + ' = __TMP__[__I__]');
										} break;

										case 1: {
											str += this.multiDeclVar(args[i] + ' = __I__');
										} break;

										case 2: {
											str += this.multiDeclVar(args[i] + ' = __TMP__');
										} break;

										case 3: {
											str += this.multiDeclVar(args[i] + ' = __I__ === 0');
										} break;

										case 4: {
											str += this.multiDeclVar(args[i] + ' = __I__ === __TMP_LENGTH__ - 1');
										} break;

										case 5: {
											str += this.multiDeclVar(args[i] + ' = __TMP_LENGTH__');
										} break;
									}
								}

								return str;
							})()
				;

			// Для объектов
			let end =
				'} else {' +

					oLength +
					this.multiDeclVar('__I__ = -1') +

					'for (' + this.multiDeclVar('__KEY__', false) + 'in ' + cache + ') {' +
						'if (!' + cache + '.hasOwnProperty(' + this.prepareOutput('__KEY__', true) + ')) {' +
							'continue;' +
						'}' +

						this.prepareOutput('__I__++;', true) +
						(() => {
							var str = '';

							for (let i = 0; i < args.length; i++) {
								switch (i) {
									case 0: {
										str += this.multiDeclVar(args[i] + ' = __TMP__[__KEY__]');
									} break;

									case 1: {
										str += this.multiDeclVar(args[i] + ' = __KEY__');
									} break;

									case 2: {
										str += this.multiDeclVar(args[i] + ' = __TMP__');
									} break;

									case 3: {
										str += this.multiDeclVar(args[i] + ' = __I__');
									} break;

									case 4: {
										str += this.multiDeclVar(args[i] + ' = __I__ === 0');
									} break;

									case 5: {
										str += this.multiDeclVar(args[i] + ' = __I__ === __TMP_LENGTH__ - 1');
									} break;

									case 6: {
										str += this.multiDeclVar(args[i] + ' = __TMP_LENGTH__');
									} break;
								}
							}

							return str;
						})()
				;

			this.save(resStr);
			this.structure.params = {
				from: this.res.length,
				end: end
			};
		}
	},

	function () {
		if (this.isSimpleOutput()) {
			let params = this.structure.params;
			this.save('}' + params.end + this.res.substring(params.from) + '}}}');
		}
	}
);

Snakeskin.addDirective(
	'$forEach',

	{
		placement: 'template',
		notEmpty: true
	},

	function (command) {
		var parts = command.split('=>');

		if (parts.length > 3) {
			throw this.error('Invalid syntax');
		}

		this.startDir(null, {
			params: parts[2] ? parts[1] : null
		});

		if (this.isSimpleOutput()) {
			let vars = (parts[2] || parts[1] || '').split(',');

			for (let i = 0; i < vars.length; i++) {
				let el = vars[i].trim();

				if (el) {
					vars[i] = this.declVar(el);
				}
			}

			this.save('$C(' + this.prepareOutput(parts[0], true) + ').forEach(function (' + vars.join(',') + ') {');
		}
	},

	function () {
		if (this.isSimpleOutput()) {
			let params = this.structure.params.params;

			if (params) {
				this.save('}, ' + this.prepareOutput(params, true) + ');');

			} else {
				this.save('});');
			}
		}
	}
);

Snakeskin.addDirective(
	'forIn',

	{
		placement: 'template',
		notEmpty: true
	},

	function (command) {
		this.startDir();
		if (this.isSimpleOutput()) {
			let parts = command.split('=>'),
				val = parts[0];

			if (parts.length > 2) {
				throw this.error('Invalid syntax');
			}

			let args = parts[1] ? parts[1].trim().split(',') : [];
			let tmp = this.multiDeclVar('__TMP__ = ' + val),
				cache = this.prepareOutput('__TMP__', true);

			let oLength = '';
			if (args.length >= 6) {
				oLength +=
					this.multiDeclVar('__TMP_LENGTH__ = 0') +
					'for (' + this.multiDeclVar('key', false) + 'in ' + cache + ') {' +
						this.prepareOutput('__TMP_LENGTH__++;', true) +
					'}';
			}

			let resStr =
				tmp +
				'if (' + cache + ') {' +
					oLength +
					this.multiDeclVar('__I__ = -1') +
					'for (' + this.multiDeclVar('__KEY__', false) + 'in ' + cache + ') {' +
						this.prepareOutput('__I__++;', true) +

						(() => {
							var str = '';

							for (let i = 0; i < args.length; i++) {
								switch (i) {
									case 0: {
										str += this.multiDeclVar(args[i] + ' = __TMP__[__KEY__]');
									} break;

									case 1: {
										str += this.multiDeclVar(args[i] + ' = __KEY__');
									} break;

									case 2: {
										str += this.multiDeclVar(args[i] + ' = __TMP__');
									} break;

									case 3: {
										str += this.multiDeclVar(args[i] + ' = __I__');
									} break;

									case 4: {
										str += this.multiDeclVar(args[i] + ' = __I__ === 0');
									} break;

									case 5: {
										str += this.multiDeclVar(args[i] + ' = __I__ === __TMP_LENGTH__ - 1');
									} break;

									case 6: {
										str += this.multiDeclVar(args[i] + ' = __TMP_LENGTH__');
									} break;
								}
							}

							return str;
						})()
			;

			this.save(resStr);
		}
	},

	function () {
		if (this.isSimpleOutput()) {
			this.save('}}');
		}
	}
);