/**!
 * @status stable
 * @version 1.0.0
 */

/**
 * Объект управления директивами
 *
 * @constructor
 * @param {string} src - текст шаблона
 * @param {boolean} commonJS - если true, то шаблон компилируется с экспортом в стиле commonJS
 * @param {boolean} dryRun - если true,
 *     то шаблон только транслируется (не компилируется), приватный параметр
 */
function DirObj(src, commonJS, dryRun) {
	var proto = this.prototype;
	for (let key in proto) {
		if (!proto.hasOwnProperty(key)) {
			continue;
		}

		if (proto[key].init) {
			this[key] = proto[key].init();
		}
	}

	/**
	 * Если false, то шаблон не вставляется в результирующую JS строку
	 * @type {boolean}
	 */
	this.canWrite = true;

	/**
	 * Если true и strongSpace = true, то последующие пробельный символы вырезаются
	 * @type {boolean}
	 */
	this.space = false;

	/**
	 * Если true и space = true, то последующие пробельный символы вырезаются
	 * (в отличии от space не меняет своё значение автоматически)
	 * @type {boolean}
	 */
	this.strongSpace = false;

	/**
	 * Номер итерации
	 * @type {number}
	 */
	this.i = -1;

	/**
	 * Структура шаблонов
	 * @type {!Object}
	 */
	this.structure = {
		name: 'root',
		parent: null,
		childs: []
	};

	/**
	 * true, если директива не имеет закрывающей части,
	 * false - если имеет
	 * @type {?boolean}
	 */
	this.inlineDir = null;

	/**
	 * Название "строгой" директивы,
	 * внутри которой могут использоваться только специально разрешённые директивы
	 * @type {?string}
	 */
	this.strongDir = null;

	/**
	 * Объект "строгой" директивы,
	 * которая будет установлена свойству strongDir после закрытия указанной директивы, формат:
	 * {
	 *     dir: название строгой директивы,
	 *     child: название директивы, после закрытия которой будет сделано присвоение
	 * }
	 *
	 * @type {Object}
	 */
	this.returnStrongDir = null;

	this.cache = {};

	/**
	 * Кеш позиций директив
	 * @type {!Object}
	 */
	this.posCache = {};

	/**
	 * Кеш позиций системных директив
	 * @type {!Object}
	 */
	this.sysPosCache = {};

	/**
	 * Содержимое скобок
	 * @type {!Array}
	 */
	this.quotContent = [];

	/**
	 * Содержимое блоков cdata
	 * @type {!Array}
	 */
	this.cDataContent = [];
	var cdata = this.cDataContent;

	/**
	 * Исходный текст шаблона
	 * @type {string}
	 */
	this.source = String(src)
		// Обработка блоков cdata
		.replace(/{cdata}([\s\S]*?){(?:\/cdata|end cdata)}/gm, (sstr, data) => {
			cdata.push(data);
			return '{__appendLine__ ' +
				data.match(/[\n\r]/g).length +
				'}__SNAKESKIN_CDATA__' +
				(cdata.length - 1) +
				'_';
		});

	/**
	 * Результирующий JS код
	 * @type {string}
	 */
	this.res = (!dryRun ? '/* This code is generated automatically, don\'t alter it. */' : '') +
		(commonJS ?
			'var Snakeskin = global.Snakeskin;' +

			'exports.liveInit = function (path) { ' +
				'Snakeskin = require(path);' +
				'exec();' +
				'return this;' +
			'};' +

			'function exec() {' :
		'');
}

Snakeskin.DirObj = DirObj;

/**
 * Добавить строку в результирующую
 * @param {string} str - исходная строка
 */
DirObj.prototype.save = function (str) {
	if (!this.tplName || Snakeskin.write[this.tplName] !== false) {
		this.res += str;
	}
};


DirObj.prototype.isSimpleOutput = function (info) {
	if (info && this.strongDir) {
		throw this.error('Directive "' + this.structure.name + '" can not be used with a "' + this.strongDir + '", ' +
			this.genErrorAdvInfo(info)
		);
	}

	return !this.parentTplName && !this.protoStart;
};

/**
 * Изменить результирующую строку
 * @param {string} str - исходная строка
 */
DirObj.prototype.replace = function (str) {
	if (this.canWrite) {
		this.res = str;
	}
};

DirObj.prototype.initCache = function (tplName) {
	blockCache[tplName] = {};

	protoCache[tplName] = {};
	fromProtoCache[tplName] = 0;

	constCache[tplName] = {};
	fromConstCache[tplName] = 0;
	constICache[tplName] = {};
};

DirObj.prototype.startDir = function (name, opt_params) {
	this.inlineDir = false;

	var vars = {};
	var struct = this.structure;

	if (struct.vars) {
		let parentVars = struct.vars;
		for (let key in parentVars) {
			if (!parentVars.hasOwnProperty(key)) {
				continue;
			}

			vars[key] = parentVars[key];
		}
	}

	var obj = {
		name: name,
		parent: struct,
		childs: [],
		vars: vars,
		params: opt_params,
		isSys: !!Snakeskin.sysDirs[name]
	};

	struct.childs.push(obj);
	this.structure = obj;
};

DirObj.prototype.startInlineDir = function (name, opt_params) {
	this.inlineDir = true;

	var obj = {
		name: name,
		parent: this.structure,
		params: opt_params
	};

	this.structure.childs.push(obj);
	this.structure = obj;
};

DirObj.prototype.endDir = function () {
	this.structure = this.structure.parent;
};

DirObj.prototype.has = function (name, opt_obj) {
	var struct = this.structure;
	var current = (opt_obj || struct).name;

	if (current === name) {
		return true;

	} else if (struct.parent && Snakeskin.sysDirs[current]) {
		return this.has(name, struct.parent);
	}

	return false;
};

DirObj.prototype.hasParent = function (name) {
	var struct = this.structure;

	if (struct.parent) {
		return this.has(name, struct.parent);
	}

	return false;
};

DirObj.prototype.hasParent = function (name) {
	var struct = this.structure;

	if (struct.parent) {
		return this.has(name, struct.parent);
	}

	return false;
};

/**
 * Удалить последнюю позицию блока
 *
 * @param {string} name - название блока
 * @return {*}
 */
DirObj.prototype.popPos = function (name) {
	if (this.sysPosCache[name]) {
		return this.sysPosCache[name].pop();
	}

	return this.posCache[name].pop();
};

/**
 * Вернуть позиции блока
 *
 * @param {string} name - название блока
 * @return {!Array}
 */
DirObj.prototype.getPos = function (name) {
	if (this.sysPosCache[name]) {
		return this.sysPosCache[name];
	}

	return this.posCache[name];
};

/**
 * Вернуть true, если у блока есть позиции
 *
 * @param {string} name - название блока
 * @return {boolean}
 */
DirObj.prototype.hasPos = function (name) {
	if (this.sysPosCache[name]) {
		return !!this.sysPosCache[name].length;
	}

	return !!(this.posCache[name] && this.posCache[name].length);
};

/**
 * Вернуть последнюю позицию блока
 *
 * @param {string} name - название блока
 * @return {*}
 */
DirObj.prototype.getLastPos = function (name) {
	if (this.sysPosCache[name]) {
		if (this.sysPosCache[name].length) {
			return this.sysPosCache[name][this.sysPosCache[name].length - 1];
		}

	} else {
		if (this.posCache[name] && this.posCache[name].length) {
			return this.posCache[name][this.posCache[name].length - 1];
		}
	}
};

/**
 * Вернуть true, если позиция не системная
 *
 * @param {number} i - номер позиции
 * @return {boolean}
 */
DirObj.prototype.isNotSysPos = function (i) {
	var res = true;

	Snakeskin.forEach(this.sysPosCache, (el, key) => {
		el = this.getLastPos(key);

		if (el && ((el.i !== void 0 && el.i === i) || el === i)) {
			res = false;
			return false;
		}

		return true;
	});

	return res;
};